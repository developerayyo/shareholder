# Generated by Django 3.1.4 on 2020-12-16 15:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ShareHolder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('share_holder_id', models.IntegerField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=60, null=True)),
                ('social_security_number', models.IntegerField(unique=True)),
                ('legacy_shareholder_id', models.CharField(max_length=100)),
                ('post_code', models.IntegerField()),
                ('employee_number', models.IntegerField(blank=True, null=True)),
                ('marital_status', models.CharField(choices=[('SINGLE', 'SINGLE'), ('MARRIED', 'MARRIED')], max_length=40)),
                ('sex', models.CharField(choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE')], max_length=40)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('date_applied', models.DateTimeField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('bank', models.CharField(max_length=100)),
                ('bank_account_no', models.IntegerField()),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True)),
                ('payment_mode', models.CharField(blank=True, choices=[('CASH', 'CASH'), ('CHEQUE', 'CHEQUE'), ('TRANSFER', 'TRANSFER')], max_length=50, null=True)),
                ('business_id', models.IntegerField(blank=True, null=True)),
                ('share_qty', models.IntegerField(blank=True, null=True)),
                ('unit_value', models.PositiveIntegerField(blank=True, null=True)),
                ('share_value', models.PositiveIntegerField(blank=True, null=True)),
                ('area_name', models.CharField(blank=True, choices=[('OGUN', 'OGUN'), ('OSUN', 'OSUN'), ('ONDO', 'ONDO'), ('EKITI', 'EKITI'), ('OYO', 'OYO')], max_length=50, null=True)),
                ('area_code', models.CharField(blank=True, choices=[('OG', 'OG'), ('OS', 'OS'), ('ON', 'ON'), ('EK', 'EK'), ('OY', 'OY')], max_length=50, null=True)),
                ('area_class', models.CharField(blank=True, choices=[('OGUN1 INDIVIDUAL', 'OGUN1 INDIVIDUAL'), ('OGUN1 UNION', 'OGUN1 UNION'), ('OGUN2 INDIVIDUAL', 'OGUN2 INDIVIDUAL'), ('OGUN2 UNION', 'OGUN2 UNION'), ('OSUN1 INDIVIDUAL', 'OSUN1 INDIVIDUAL'), ('OSUN1 UNION', 'OSUN1 UNION'), ('OSUN2 INDIVIDUAL', 'OSUN2 INDIVIDUAL'), ('OSUN2 UNION', 'OSUN2 UNION'), ('ONDO1 INDIVIDUAL', 'OGUN1 INDIVIDUAL'), ('ONDO1 UNION', 'OGUN1 UNION'), ('ONDO2 INDIVIDUAL', 'ONDO2 INDIVIDUAL'), ('ONDO2 UNION', 'ONDO2 UNION'), ('EKITI1 INDIVIDUAL', 'EKITI1 INDIVIDUAL'), ('EKITI1 UNION', 'EKITI1 UNION'), ('EKITI2 INDIVIDUAL', 'EKITI2 INDIVIDUAL'), ('EKITI2 UNION', 'EKITI2 UNION'), ('OYO1 INDIVIDUAL', 'OYO1 INDIVIDUAL'), ('OYO1 UNION', 'OYO1 UNION'), ('OYO2 INDIVIDUAL', 'OYO2 INDIVIDUAL'), ('OYO2 UNION', 'OYO2 UNION')], max_length=100, null=True)),
                ('city', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('address', models.CharField(blank=True, max_length=60, null=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='pictures/')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
